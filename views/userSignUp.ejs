<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FoodWo</title>
    <link href="/public/css/output.css" rel="stylesheet">
    <link rel="apple-touch-icon" sizes="180x180" href="/public/images/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/public/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/public/images/favicon-16x16.png">
    <script src="https://kit.fontawesome.com/70218ce737.js" crossorigin="anonymous"></script>

    <style>
        /* Hide the "No file chosen" text */
        .custom-file-input::file-selector-button {
            display: none;
        }
    </style>
</head>

<body>
    <!-- navigation -->
    <nav class="py-4 px-5 md:px-10 flex justify-between items-center shadow-2xl">
        <div class="text-center p-2 bg-MainSearchBg">
            <span class="text-orange-500 font-bold text-2xl md:text-3xl ">FoodWo</span>
        </div>
        <div class="flex justify-between items-center">
            <a href="/user/login" class="font-semibold text-xl mx-2">Login</a>
            <a href="/user/signup"
                class="px-4 text-center py-2 text-white bg-orange-500 rounded-full mx-2 md:text-xl">Signup</a>
        </div>
    </nav>

    <!-- main section -->
    <section class="mt-10 px-5 overflow-x-hidden">
        <h1 class="my-5 text-center font-bold text-orange-500 text-2xl md:text-3xl">Sign Up</h1>

        <div class="md:flex md:justify-between md:items-center">
            <div class="md:w-1/2 md:px-4">
                <!-- Input Fields -->
                <form action="">
                    <div class="flex flex-col my-2">
                        <label for="">Full Name</label>
                        <input type="text" name="fullname" maxlength="20" id="fullname" placeholder="Enter fullname"
                            class="px-2 placeholder:px-2 py-2 rounded outline-orange-500 border border-orange-500">
                    </div>
                    <div class="flex flex-col my-2">
                        <label for="">Email</label>
                        <input type="email" name="email" id="email" placeholder="Enter Email"
                            class="px-2 placeholder:px-2 py-2 rounded outline-orange-500 border border-orange-500">
                    </div>
                    <div class="flex flex-col my-2">
                        <label for="">Phone</label>
                        <input type="tel" maxlength="10" name="phone" id="phone" placeholder="Enter Phone no."
                            class="px-2 placeholder:px-2 py-2 rounded outline-orange-500 border border-orange-500">
                    </div>
                    <div class="flex flex-col my-2">
                        <label for="">Address</label>
                        <input type="text" name="address" id="address" placeholder="Enter Address"
                            class="px-2 placeholder:px-2 py-2 rounded outline-orange-500 border border-orange-500">
                    </div>
                    <div class="flex flex-col my-2">
                        <label for="">Password</label>
                        <input type="password" name="password" id="password" autocomplete="new-password"
                            placeholder="Enter Password"
                            class="px-2 placeholder:px-2 py-2 rounded outline-orange-500 border border-orange-500">
                    </div>
                </form>
            </div>

            <!-- screen divider -->
            <hr class="my-8 border border-orange-500 md:hidden">
            <div class="hidden md:block h-72 rounded-full mx-20  bg-orange-500 text-orange-500">.</div>

            <div class="md:w-1/2 md:px-4">
                <!-- image upload -->
                <label for="doc"
                    class="md:w-2/3 md:mx-auto bg-orange-100 rounded h-72 w-full text-center flex flex-col justify-center items-centerd cursor-pointer">
                    <img src="#" class="w-full h-full hidden rounded object-cover" alt="" id="imagetag">
                    <div class="text-orange-500 text-6xl my-3" id="userIcon"><i class="fa-regular fa-user"></i></div>
                    <input type="file" name="" placeholder="upload profile" id="doc" class="" hidden>
                    <span id="uploadtext">Upload Profile</span>
                </label>

            </div>
        </div>

        <div class="my-8 text-center">
            <button type="submit" onclick="handleSignIn(event)"
                class="bg-orange-500 rounded-full py-2 px-6 md:px-6 text-white text-xl md:text-xl">Create</button>
        </div>

        <div class="md:w-1/2 relative flex justify-center items-center mx-auto mb-5">
            <div id="toast"
                class="transition duration-[0.5s] md:w-80 bg-orange-500 py-5 px-3 hidden ease-linear rounded-md text-center text-white">
            </div>
        </div>

    </section>

    <!-- footer -->
    <footer class="py-10 bg-[#02060C]">
        <p class="text-white text-center">Developed By Richu Sony</p>
    </footer>

    <script>
        let baseImage = "";
        // Image Details
        const image = document.getElementById('doc');
        const imagetag = document.getElementById('imagetag');
        const uploadtext = document.getElementById('uploadtext');
        const userIcon = document.getElementById('userIcon');

        const toast = document.getElementById('toast');
        // const toastMessage = document.getElementById('toastMessage');



        image.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (file) {
                baseImage = await ImagetoBase64(file);
                imagetag.style.display = "block";
                userIcon.style.display = "none";
                uploadtext.style.display = "none";
                imagetag.setAttribute("src", baseImage);
            }
        });

        async function ImagetoBase64(file) {
            const reader = new FileReader();
            reader.readAsDataURL(file);

            return new Promise((resolve, reject) => {
                reader.onload = () => resolve(reader.result);
                reader.onerror = err => reject(err);
            });
        }

        async function handleSignIn(event) {
            event.preventDefault();
            //User Details
            const fullname = document.getElementById('fullname').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            const address = document.getElementById('address').value;
            const password = document.getElementById('password').value;

            const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{8,}$/;
            const isPasswordValid = passwordRegex.test(password);

            const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

            // Check if the email address matches the regular expression
            const isEmailValid = emailRegex.test(email);

            if (!fullname || !email || !phone || !address || !password) {
                toast.innerHTML = `<span id="toastMessage" class="text-sm"><i class="fa-solid fa-triangle-exclamation text-xl"></i> All fields are required.</span>`;
                toast.classList.remove("hidden");
                toast.classList.remove("translate-y-96");
                setTimeout(() => {
                    toast.classList.add("hidden");
                    toast.classList.add("translate-y-96");
                }, 3000)
            }
            else if (!isEmailValid) {
                toast.innerHTML = `<span id="toastMessage" class="text-sm"><i class="fa-solid fa-triangle-exclamation text-xl"></i> Please enter a valid email address.</span>`;
                toast.classList.remove("hidden");
                toast.classList.remove("translate-y-96");
                setTimeout(() => {
                    toast.classList.add("hidden");
                    toast.classList.add("translate-y-96");
                }, 3000);
            }
            else if (phone.length < 10) {
                toast.innerHTML = `<span id="toastMessage" class="text-sm"><i class="fa-solid fa-triangle-exclamation text-xl"></i> Please enter a valid phone no.</span>`;
                toast.classList.remove("hidden");
                toast.classList.remove("translate-y-96");
                setTimeout(() => {
                    toast.classList.add("hidden");
                    toast.classList.add("translate-y-96");
                }, 3000);
            } else if (!isPasswordValid) {
                toast.innerHTML = `<span id="toastMessage" class="text-sm"><i class="fa-solid fa-triangle-exclamation text-xl"></i> Password must be 8 characters and least one capital letter, one small letter, and one number.</span>`;
                toast.classList.remove("hidden");
                toast.classList.remove("translate-y-96");
                setTimeout(() => {
                    toast.classList.add("hidden");
                    toast.classList.add("translate-y-96");
                }, 3000)
            }
            else {
                const formData = {
                    fullname: fullname,
                    email: email,
                    phone: phone,
                    address: address,
                    password: password,
                    baseImage: baseImage
                }

                const userData = await JSON.stringify(formData);
                try {
                    // Send a POST request to the server using async/await
                    const response = await fetch(`/user/signup`, {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json",
                            // 'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: userData,
                    });
                    if (!response.ok) {
                        // Handle the case where the server returns an error
                        // throw new Error(`Server responded with status: ${response.status}`);
                        const data = await response.json();
                        console.log("DAta ::  ", data);
                        if (data.failed) {
                            toast.innerHTML = `<span id="toastMessage" class="text-sm"><i class="fa-solid fa-triangle-exclamation text-xl"></i> ${data.failed}</span>`;
                            toast.classList.remove("hidden");
                            toast.classList.remove("translate-y-96");
                            setTimeout(() => {
                                toast.classList.add("hidden");
                                toast.classList.add("translate-y-96");
                            }, 3000);
                        }

                    }
                    if (response.ok) {
                        window.location.href = "/user/otpVerify"
                    }



                    // Handle the server's response here (e.g., display a success message or handle errors)
                    // console.log("data from back : ",data);
                } catch (error) {
                    // Handle any network, request, or other errors here
                    console.error(error);
                }
            }
        }





    </script>
</body>

</html>